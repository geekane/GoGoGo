# 工作流的名称
name: Build and Sign APK

# 触发条件：当你推送代码到 main 或 master 分支时，自动运行
on:
  push:
    branches:
      - main
      - master

# 工作任务
jobs:
  build-and-sign:
    name: Build and Sign Release APK
    # 在最新的Ubuntu环境里运行
    runs-on: ubuntu-latest

    steps:
      # 第1步：下载你的代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 第2步：设置构建App所需的Java环境 (JDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # 第3步：给gradlew脚本文件添加执行权限
      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      # 第4步：从你的GitHub秘密变量中解码出签名证书文件
      - name: Decode Keystore
        id: decode_keystore
        env:
          SIGNING_KEY_BASE64: ${{ secrets.SIGNING_KEY }}
        run: |
          echo "正在解码证书文件..."
          KEYSTORE_PATH="${{ runner.temp }}/keystore.jks"
          echo "$SIGNING_KEY_BASE64" | base64 --decode > "$KEYSTORE_PATH"
          echo "证书文件已成功解码到: $KEYSTORE_PATH"
          echo "keystore_path=$KEYSTORE_PATH" >> $GITHUB_OUTPUT

      # 第5步：使用Gradle构建并同时签名APK
      - name: Build and Sign with Gradle
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          SIGNING_STORE_FILE: ${{ steps.decode_keystore.outputs.keystore_path }}
        run: ./gradlew assembleRelease

      # --- 修改就在下面这一步！ ---
      # 第6步：上传签名好的APK文件，方便你下载
      - name: Upload Signed APK
        uses: actions/upload-artifact@v4
        with:
          name: signed-release-apk
          # 使用通配符(*)来匹配所有以 .apk 结尾的文件
          path: app/build/outputs/apk/release/*.apk
